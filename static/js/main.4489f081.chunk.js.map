{"version":3,"sources":["chat.js","App.js","index.js"],"names":["client","ApiAiClient","accessToken","sendMessage","text","sender","type","payload","initState","store","createStore","state","action","applyMiddleware","next","console","log","textRequest","then","response","result","fulfillment","speech","App","this","props","feed","map","entry","index","className","key","onKeyDown","e","keyCode","target","value","Component","connect","ReactDOM","render","document","getElementById"],"mappings":"6QAGMA,EAAS,IAAIC,IAAY,CAACC,YADZ,qCAIPC,EAAc,SAACC,GAAD,IAAOC,EAAP,uDAAgB,OAAhB,MAA4B,CACrDC,KAFiB,aAGjBC,QAAS,CAACH,OAAMC,YAmBZG,EAAY,CAAC,CAACJ,KAAM,oCAUbK,EAAQC,aATE,WAAgC,IAA/BC,EAA8B,uDAAtBH,EAAWI,EAAW,uCACpD,OAAOA,EAAON,MACZ,IAzBe,aA0Bb,MAAM,GAAN,mBAAWK,GAAX,CAAkBC,EAAOL,UAC3B,QACE,OAAOI,KAIoCE,aA1BvB,kBAAM,SAAAC,GAAI,OAAI,SAAAF,GAKtC,GAJAE,EAAKF,GAELG,QAAQC,IAAI,cAAeJ,GATV,eAWbA,EAAON,KAAqB,CAAC,IACxBF,EAAQQ,EAAOL,QAAfH,KACPJ,EAAOiB,YAAYb,GAAMc,MACzB,SAAmBC,GACjBJ,QAAQC,IAAI,eAAgBG,EAASC,OAAOC,YAAYC,QAExDR,EAAKX,EAAYgB,EAASC,OAAOC,YAAYC,OAAQ,kBClBrDC,E,iLACM,IAAD,EACqBC,KAAKC,MAA1BC,EADA,EACAA,KAAMvB,EADN,EACMA,YAIb,OAFAY,QAAQC,IAAIU,GAGV,6BACE,yCACA,4BACGA,EAAKC,KAAI,SAACC,EAAOC,GAAR,OAAkB,wBAAIC,UAA6B,QAAjBF,EAAMvB,OAAmB,MAAQ,OAAS0B,IAAKF,GAAQD,EAAMxB,UAE3G,2BAAOE,KAAK,OAAO0B,UAAW,SAACC,GAAD,OAAqB,KAAdA,EAAEC,QAAe/B,EAAY8B,EAAEE,OAAOC,OAAS,a,GAZ1EC,aAsBHC,eAJS,SAAA3B,GAAK,MAAK,CAChCe,KAAMf,KAGgC,CAACR,eAA1BmC,CAAwCf,G,MCnBvDgB,IAASC,OACT,kBAAC,IAAD,CAAU/B,MAAOA,GAAO,kBAAC,EAAD,OAAmBgC,SAASC,eAAe,W","file":"static/js/main.4489f081.chunk.js","sourcesContent":["import {ApiAiClient} from 'api-ai-javascript';\nimport {applyMiddleware, createStore} from 'redux';\nconst accessToken = 'b9410acf93b3497c9691627588fd6921';\nconst client = new ApiAiClient({accessToken});\n\nconst ON_MESSAGE = 'ON_MESSAGE';\nexport const sendMessage = (text, sender = 'user') => ({\n  type: ON_MESSAGE,\n  payload: {text, sender}\n})\n\nconst messageMiddleware = () => next => action => {\n  next(action)\n\n  console.log('next action', action)\n\n  if (action.type === ON_MESSAGE) {\n    const {text} = action.payload;\n    client.textRequest(text).then(onSuccess)\n    function onSuccess(response) {\n      console.log('Msg Response', response.result.fulfillment.speech);\n\n      next(sendMessage(response.result.fulfillment.speech, 'bot'));\n    }\n  }\n}\n\nconst initState = [{text: 'What can you tell me about OCA?'}];\nconst messageReducer = (state = initState, action) => {\n  switch(action.type) {\n    case ON_MESSAGE:\n      return [...state, action.payload]\n    default:\n      return state  \n  }\n}\n\nexport const store = createStore(messageReducer, applyMiddleware(messageMiddleware))","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {sendMessage} from './chat';\n\nclass App extends Component {\n  render() {\n    const {feed, sendMessage} = this.props;\n\n    console.log(feed);\n\n    return(\n      <div>\n        <h1>OCA Chat!</h1>\n        <ul>\n          {feed.map((entry, index) => <li className={(entry.sender === 'bot' ? 'bot' : 'user')} key={index}>{entry.text}</li>)}\n        </ul>\n        <input type='text' onKeyDown={(e) => e.keyCode === 13?sendMessage(e.target.value) : null} />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  feed: state\n})\n\nexport default connect(mapStateToProps, {sendMessage})(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {store} from './chat';\nimport 'milligram';\n\nReactDOM.render(\n<Provider store={store}><App /></Provider>,document.getElementById('root'));"],"sourceRoot":""}